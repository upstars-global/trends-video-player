#!/usr/bin/env node

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import { referenceGamesList } from './reference-games-list.js';

// –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ç–µ–∫—É—â–µ–º—É —Å–∫—Ä–∏–ø—Ç—É –∏ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const rootDir = path.resolve(__dirname, '..');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
function checkFileExists(filePath) {
  try {
    return fs.existsSync(filePath);
  } catch (error) {
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–≥—Ä –∏–∑ App.vue
function getActiveDataFile() {
  const appVuePath = path.join(rootDir, 'src', 'App.vue');
  
  try {
    const content = fs.readFileSync(appVuePath, 'utf8');
    
    // –ò—â–µ–º –∏–º–ø–æ—Ä—Ç —Ç–∏–ø–∞: import { gamesData, Game as GameData } from './gameDataSets/02.06'
    const importRegex = /import\s+{[^}]*gamesData[^}]*}\s+from\s+['"]\.\/gameDataSets\/([^'"]+)['"]/;
    const match = content.match(importRegex);
    
    if (match) {
      const fileName = match[1];
      console.log(`–û–±–Ω–∞—Ä—É–∂–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö: ${fileName}.ts`);
      return fileName + '.ts';
    } else {
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–º–ø–æ—Ä—Ç gamesData –≤ App.vue, –∏—Å–ø–æ–ª—å–∑—É–µ–º 02.06.ts –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
      return '02.06.ts';
    }
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ App.vue: ${error.message}`);
    console.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º 02.06.ts –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
    return '02.06.ts';
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä
async function parseAndValidateGamesData() {
  const activeFile = getActiveDataFile();
  const filePath = path.join(rootDir, 'src', 'gameDataSets', activeFile);
  
  try {
    const content = fs.readFileSync(filePath, 'utf8');
    const lines = content.split('\n');
    
    const games = [];
    const srcValues = [];
    const auGameSlugs = [];
    let currentGame = null;
    
    // –ü–æ—Å—Ç—Ä–æ—á–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i].trim();
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º name –∏–≥—Ä—ã
      if (line.startsWith('name:')) {
        const nameMatch = line.match(/name:\s*['"]([^'"]*)['"]/);
        if (nameMatch) {
          currentGame = { name: nameMatch[1], line: i + 1 };
        }
      }
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º src –∏–≥—Ä—ã
      if (line.startsWith('src:') && currentGame) {
        const srcMatch = line.match(/src:\s*['"]([^'"]*)['"]/);
        if (srcMatch) {
          currentGame.src = srcMatch[1];
          if (srcMatch[1] && srcMatch[1].trim() !== '') {
            games.push({ ...currentGame });
            srcValues.push(srcMatch[1]);
          }
          currentGame = null;
        }
      }
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º game_slug –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞ AU
      if (line.includes('au:')) {
        // –ò—â–µ–º —Å–ª–µ–¥—É—é—â–∏–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è game_slug
        for (let j = i; j < Math.min(i + 5, lines.length); j++) {
          const auLine = lines[j].trim();
          if (auLine.startsWith('game_slug:')) {
            const auGameSlugMatch = auLine.match(/game_slug:\s*['"]([^'"]*)['"]/);
            if (auGameSlugMatch) {
              auGameSlugs.push(auGameSlugMatch[1]);
              break;
            }
          }
        }
      }
    }
    
    // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã src –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–æ–≤
    const uniqueSrcValues = [...new Set(srcValues)];
    
    return {
      games,
      srcValues: uniqueSrcValues,
      auGameSlugs,
      activeFile
    };
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ ${activeFile}: ${error.message}`);
    return {
      games: [],
      srcValues: [],
      auGameSlugs: [],
      activeFile
    };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∏–≥—Ä
function checkForDuplicates(games) {
  console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∏–≥—Ä...');
  
  // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–∂–∏–¥–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–∂–¥–æ–π –∏–≥—Ä—ã –∏–∑ —ç—Ç–∞–ª–æ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
  const expectedCounts = {};
  referenceGamesList.forEach(game => {
    const normalizedName = game.toLowerCase().trim();
    expectedCounts[normalizedName] = (expectedCounts[normalizedName] || 0) + 1;
  });
  
  const srcCounts = {};
  const nameCounts = {};
  const invalidDuplicates = [];
  
  games.forEach((game, index) => {
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –ø–æ src
    if (srcCounts[game.src]) {
      srcCounts[game.src].push(game);
    } else {
      srcCounts[game.src] = [game];
    }
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –ø–æ name
    const normalizedName = game.name.toLowerCase().trim();
    if (nameCounts[normalizedName]) {
      nameCounts[normalizedName].push(game);
    } else {
      nameCounts[normalizedName] = [game];
    }
  });
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ src (–≤—Å–µ–≥–¥–∞ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã)
  Object.keys(srcCounts).forEach(src => {
    if (srcCounts[src].length > 1) {
      invalidDuplicates.push({
        type: 'src',
        value: src,
        count: srcCounts[src].length,
        games: srcCounts[src],
        reason: '–û–¥–∏–Ω–∞–∫–æ–≤—ã–µ src –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã'
      });
    }
  });
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ name
  Object.keys(nameCounts).forEach(normalizedName => {
    const gamesWithSameName = nameCounts[normalizedName];
    const actualCount = gamesWithSameName.length;
    const expectedCount = expectedCounts[normalizedName] || 1;
    
    if (actualCount > 1) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–≥—Ä—ã —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ src
      const srcSet = new Set(gamesWithSameName.map(game => game.src));
      const hasIdenticalSrc = srcSet.size < actualCount;
      
      if (hasIdenticalSrc) {
        // –ï—Å–ª–∏ –µ—Å—Ç—å –∏–≥—Ä—ã —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ src - —ç—Ç–æ –æ—à–∏–±–∫–∞
        invalidDuplicates.push({
          type: 'name_with_same_src',
          value: gamesWithSameName[0].name,
          count: actualCount,
          games: gamesWithSameName,
          reason: '–ò–≥—Ä—ã —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º name –∏ src'
        });
      } else if (actualCount !== expectedCount) {
        // –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —ç—Ç–∞–ª–æ–Ω—É - —ç—Ç–æ –æ—à–∏–±–∫–∞
        invalidDuplicates.push({
          type: 'name_count_mismatch',
          value: gamesWithSameName[0].name,
          count: actualCount,
          expected: expectedCount,
          games: gamesWithSameName,
          reason: `–û–∂–∏–¥–∞–µ—Ç—Å—è ${expectedCount}, –Ω–∞–π–¥–µ–Ω–æ ${actualCount}`
        });
      }
      // –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —ç—Ç–∞–ª–æ–Ω—É –∏ –≤—Å–µ src —Ä–∞–∑–Ω—ã–µ - —ç—Ç–æ –Ω–æ—Ä–º–∞
    }
  });
  
  if (invalidDuplicates.length > 0) {
    console.log('‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ –¥—É–±–ª–∏–∫–∞—Ç—ã:');
    invalidDuplicates.forEach(duplicate => {
      console.log(`   ${duplicate.type.toUpperCase()}: "${duplicate.value}" - ${duplicate.reason}`);
      duplicate.games.forEach((game, index) => {
        console.log(`     ${index + 1}. name: "${game.name}", src: "${game.src}"`);
      });
    });
    return false;
  } else {
    console.log('‚úÖ –î—É–±–ª–∏–∫–∞—Ç—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —ç—Ç–∞–ª–æ–Ω–Ω–æ–º—É —Å–ø–∏—Å–∫—É!');
    return true;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è src –∏ game_slug –¥–ª—è AU
function checkSrcAuGameSlugMatch(srcValues, auGameSlugs) {
  console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è src –∏ game_slug –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞ AU...');
  
  const mismatches = [];
  
  // –°–æ–∑–¥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∏–∑ AU game_slug –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
  const auGameSlugSet = new Set(auGameSlugs);
  
  srcValues.forEach(src => {
    if (!auGameSlugSet.has(src)) {
      mismatches.push(src);
    }
  });
  
  if (mismatches.length > 0) {
    console.log('‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è src –∏ game_slug –¥–ª—è AU:');
    mismatches.forEach(src => {
      console.log(`   src: "${src}" –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ game_slug –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞ AU`);
    });
    return false;
  } else {
    console.log('‚úÖ –í—Å–µ src —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç game_slug –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞ AU!');
    return true;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∏–≥—Ä —Å —ç—Ç–∞–ª–æ–Ω–Ω—ã–º
function compareWithReferenceList(games) {
  console.log('\nüîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —ç—Ç–∞–ª–æ–Ω–Ω—ã–º —Å–ø–∏—Å–∫–æ–º –∏–≥—Ä...');
  
  // –ü–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–∞ –∏–≥—Ä –∏–∑ –Ω–∞—à–µ–≥–æ —Ñ–∞–π–ª–∞
  const currentGameNames = games.map(game => game.name);
  const uniqueCurrentNames = [...new Set(currentGameNames)];
  
  // –°–æ–∑–¥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (–ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è)
  const currentNamesSet = new Set(uniqueCurrentNames.map(name => name.toLowerCase().trim()));
  const referenceNamesSet = new Set(referenceGamesList.map(name => name.toLowerCase().trim()));
  
  // –ù–∞—Ö–æ–¥–∏–º –∏–≥—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ —ç—Ç–∞–ª–æ–Ω–Ω–æ–º —Å–ø–∏—Å–∫–µ, –Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –Ω–∞—à–µ–º —Ñ–∞–π–ª–µ
  const missingGames = [];
  referenceGamesList.forEach(refGame => {
    if (!currentNamesSet.has(refGame.toLowerCase().trim())) {
      missingGames.push(refGame);
    }
  });
  
  // –ù–∞—Ö–æ–¥–∏–º –∏–≥—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ –Ω–∞—à–µ–º —Ñ–∞–π–ª–µ, –Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ —ç—Ç–∞–ª–æ–Ω–Ω–æ–º —Å–ø–∏—Å–∫–µ
  const extraGames = [];
  uniqueCurrentNames.forEach(currentGame => {
    if (!referenceNamesSet.has(currentGame.toLowerCase().trim())) {
      extraGames.push(currentGame);
    }
  });
  
  // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —á–∞—Å—Ç–æ—Ç—É –∏–≥—Ä –≤ —ç—Ç–∞–ª–æ–Ω–Ω–æ–º —Å–ø–∏—Å–∫–µ
  const referenceCounts = {};
  referenceGamesList.forEach(game => {
    const normalizedName = game.toLowerCase().trim();
    referenceCounts[normalizedName] = (referenceCounts[normalizedName] || 0) + 1;
  });
  
  // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —á–∞—Å—Ç–æ—Ç—É –∏–≥—Ä –≤ –Ω–∞—à–µ–º —Å–ø–∏—Å–∫–µ
  const currentCounts = {};
  currentGameNames.forEach(game => {
    const normalizedName = game.toLowerCase().trim();
    currentCounts[normalizedName] = (currentCounts[normalizedName] || 0) + 1;
  });
  
  // –ù–∞—Ö–æ–¥–∏–º –∏–≥—Ä—ã —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≤—Ö–æ–∂–¥–µ–Ω–∏–π
  const countMismatches = [];
  Object.keys(referenceCounts).forEach(game => {
    const refCount = referenceCounts[game];
    const currentCount = currentCounts[game] || 0;
    if (refCount !== currentCount && currentCount > 0) {
      // –ù–∞—Ö–æ–¥–∏–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è –∏–≥—Ä—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const originalName = referenceGamesList.find(ref => ref.toLowerCase().trim() === game);
      countMismatches.push({
        name: originalName,
        expected: refCount,
        actual: currentCount
      });
    }
  });
  
  let hasIssues = false;
  
  // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  if (missingGames.length > 0) {
    console.log('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∏–≥—Ä—ã:');
    missingGames.forEach(game => {
      console.log(`   - ${game}`);
    });
    hasIssues = true;
  }
  
  if (extraGames.length > 0) {
    console.log('‚ö†Ô∏è  –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–≥—Ä—ã (–Ω–µ –≤ —ç—Ç–∞–ª–æ–Ω–Ω–æ–º —Å–ø–∏—Å–∫–µ):');
    extraGames.forEach(game => {
      console.log(`   - ${game}`);
    });
    hasIssues = true;
  }
  
  if (countMismatches.length > 0) {
    console.log('‚ö†Ô∏è  –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ö–æ–∂–¥–µ–Ω–∏–π:');
    countMismatches.forEach(mismatch => {
      console.log(`   - ${mismatch.name}: –æ–∂–∏–¥–∞–µ—Ç—Å—è ${mismatch.expected}, —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ ${mismatch.actual}`);
    });
    hasIssues = true;
  }
  
  if (!hasIssues) {
    console.log('‚úÖ –°–ø–∏—Å–æ–∫ –∏–≥—Ä –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —ç—Ç–∞–ª–æ–Ω–Ω–æ–º—É!');
  }
  
  console.log(`\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
  console.log(`   –≠—Ç–∞–ª–æ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫: ${referenceGamesList.length} –∏–≥—Ä`);
  console.log(`   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤ —ç—Ç–∞–ª–æ–Ω–µ: ${new Set(referenceGamesList.map(g => g.toLowerCase().trim())).size} –∏–≥—Ä`);
  console.log(`   –¢–µ–∫—É—â–∏–π —Ñ–∞–π–ª: ${currentGameNames.length} –∏–≥—Ä`);
  console.log(`   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤ —Ñ–∞–π–ª–µ: ${uniqueCurrentNames.length} –∏–≥—Ä`);
  
  return !hasIssues;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
async function checkAllAssets() {
  console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö –º–µ–¥–∏–∞-—Ñ–∞–π–ª–æ–≤ –¥–ª—è –∏–≥—Ä...');
  
  // –ü–æ–ª—É—á–∞–µ–º –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
  const { games, srcValues, auGameSlugs, activeFile } = await parseAndValidateGamesData();
  
  if (srcValues.length === 0) {
    console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è src –∏–∑ —Ñ–∞–π–ª–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–≥—Ä');
    process.exit(1);
  }
  
  console.log(`–ù–∞–π–¥–µ–Ω–æ ${srcValues.length} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–≥—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
  const noDuplicates = checkForDuplicates(games);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ src –∏ game_slug –¥–ª—è AU
  const srcMatchesAu = checkSrcAuGameSlugMatch(srcValues, auGameSlugs);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å —ç—Ç–∞–ª–æ–Ω–Ω—ã–º —Å–ø–∏—Å–∫–æ–º –∏–≥—Ä
  const matchesReference = compareWithReferenceList(games);
  
  // –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–∞–Ω–Ω—ã–º–∏, –∑–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
  if (!noDuplicates || !srcMatchesAu || !matchesReference) {
    console.log('\n‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –¥–∞–Ω–Ω—ã—Ö!');
    process.exit(1);
  }
  
  console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –º–µ–¥–∏–∞-—Ñ–∞–π–ª–æ–≤...');
  
  const missingFiles = [];
  let allAssetsExist = true;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ src
  for (const src of srcValues) {
    // –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å
    const filesToCheck = [
      { type: 'Thumbnail', path: path.join(rootDir, 'public', 'thumbs', `${src}.webp`) },
      { type: 'Poster', path: path.join(rootDir, 'public', 'video', 'posters', `${src}.webp`) },
      { type: 'WebM Video', path: path.join(rootDir, 'public', 'video', 'webm', `${src}.webm`) },
      { type: 'MP4 Video', path: path.join(rootDir, 'public', 'video', 'h264', `${src}.mp4`) }
    ];
    
    for (const fileInfo of filesToCheck) {
      if (!checkFileExists(fileInfo.path)) {
        allAssetsExist = false;
        missingFiles.push({ src, type: fileInfo.type, path: fileInfo.path });
      }
    }
  }
  
  // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–µ–¥–∏–∞-—Ñ–∞–π–ª–æ–≤
  if (allAssetsExist) {
    console.log('‚úÖ –í—Å–µ –º–µ–¥–∏–∞-—Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã!');
  } else {
    console.log('‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –º–µ–¥–∏–∞-—Ñ–∞–π–ª—ã:');
    missingFiles.forEach(file => {
      console.log(`   ${file.src} - ${file.type}: ${path.relative(rootDir, file.path)}`);
    });
    
    // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤ –ø–æ —Ç–∏–ø—É –∏–≥—Ä—ã
    console.log('\n–°–≤–æ–¥–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤ –ø–æ –∏–≥—Ä–∞–º:');
    const gamesMissing = {};
    missingFiles.forEach(file => {
      if (!gamesMissing[file.src]) {
        gamesMissing[file.src] = [];
      }
      gamesMissing[file.src].push(file.type);
    });
    
    Object.keys(gamesMissing).forEach(game => {
      console.log(`   ${game}: ${gamesMissing[game].join(', ')}`);
    });
    
    process.exit(1);
  }
  
  console.log('\nüéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
checkAllAssets().catch(error => {
  console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏:', error);
  process.exit(1);
}); 